
import { RoadmapItem } from '../types';

export const roadmapData: RoadmapItem[] = [
  { day: 1, focus: "Getting Started with JavaScript", description: "Understand what JavaScript is, its role in web development, and how to set up your environment for coding.", topics: ["What is JavaScript?", "Where to put JavaScript (internal, external)", "JavaScript output (console.log, alert, document.write)", "Basic syntax"], time: "1 hr" },
  { day: 2, focus: "Declaring Variables", description: "Learn the different ways to declare variables in JavaScript using var, let, and const, and understand their scope.", topics: ["Declaring variables with var, let, and const", "Differences between var, let, and const", "Variable naming rules"], time: "1 hr" },
  { day: 3, focus: "Understanding Data Types", description: "Explore the fundamental data types in JavaScript, including primitives and objects.", topics: ["String", "Number", "BigInt", "Boolean", "Undefined", "Null", "Symbol", "Object data type"], time: "1 hr" },
  { day: 4, focus: "Performing Operations", description: "Dive into different types of operators used for calculations, comparisons, and logical operations.", topics: ["Arithmetic operators", "Assignment operators", "Comparison operators", "Logical operators"], time: "1 hr" },
  { day: 5, focus: "Working with Text", description: "Learn how to declare, manipulate, and work with string values, including common string methods.", topics: ["String declaration", "String length", "Escape characters", "String methods (slice, substring, replace, toUpperCase, etc.)"], time: "1 hr" },
  { day: 6, focus: "Handling Numerical Data", description: "Explore numbers in JavaScript, number methods, and the built-in Math object for mathematical operations.", topics: ["Integer and floating-point numbers", "Number methods (toString, toFixed, parseInt, parseFloat)", "Math object methods (round, ceil, floor, pow, sqrt, etc.)"], time: "1 hr" },
  { day: 7, focus: "Logical Decisions", description: "Understand boolean values and how comparison operators are used to make decisions in your code.", topics: ["Boolean values (true, false)", "Comparison operators (==, ===, !=, !==, >, <, >=, <=)", "Ternary operator"], time: "1 hr" },
  { day: 8, focus: "Conditional Logic", description: "Learn how to execute different blocks of code based on specific conditions using if, else if, and else.", topics: ["The if statement", "The else statement", "The else if statement", "Logical operators with conditions"], time: "1 hr" },
  { day: 9, focus: "Multiple Choice Decisions", description: "Master the switch statement for handling multiple possible execution paths based on a single expression.", topics: ["The switch statement", "The break keyword", "The default keyword"], time: "1 hr" },
  { day: 10, focus: "Reusable Code Blocks", description: "Introduce functions as reusable blocks of code, how to declare and call them, and their basic structure.", topics: ["Function declaration", "Function invocation", "Parameters and arguments", "Return values"], time: "1 hr" },
  { day: 11, focus: "Modern Function Syntax", description: "Explore function expressions and the concise syntax of ES6 arrow functions, understanding their differences.", topics: ["Function expressions", "Arrow function syntax", "Arrow functions and 'this' keyword"], time: "1 hr" },
  { day: 12, focus: "Structured Data with Objects", description: "Learn how to create and access properties of JavaScript objects, which are fundamental for structured data.", topics: ["Object literals", "Accessing properties (dot notation, bracket notation)", "Adding/modifying properties", "Deleting properties"], time: "1 hr" },
  { day: 13, focus: "Object Behavior and Context", description: "Discover how to add functions (methods) to objects and understand the crucial role of the 'this' keyword within them.", topics: ["Object methods", "The 'this' keyword in methods"], time: "1 hr" },
  { day: 14, focus: "Ordered Collections", description: "Get started with arrays for storing ordered collections of data and learn basic array operations.", topics: ["Declaring arrays", "Accessing array elements", "Modifying array elements", "Array length"], time: "1 hr" },
  { day: 15, focus: "Manipulating Arrays", description: "Explore common array methods for adding, removing, and combining elements.", topics: ["push()", "pop()", "shift()", "unshift()", "concat()", "splice()", "slice()", "toString()", "join()"], time: "1 hr" },
  { day: 16, focus: "Iterating Over Arrays", description: "Learn powerful array iteration methods to perform operations on each element.", topics: ["forEach()", "map()", "filter()", "reduce()", "every()", "some()", "find()", "findIndex()"], time: "1 hr" },
  { day: 17, focus: "Repetitive Tasks with For Loops", description: "Master the for loop for iterating a specific number of times or over array elements.", topics: ["Basic for loop syntax", "Looping through arrays"], time: "1 hr" },
  { day: 18, focus: "Conditional Repetition", description: "Learn about while and do/while loops for executing code repeatedly as long as a condition is true.", topics: ["While loop", "Do/while loop", "Breaking and continuing loops"], time: "1 hr" },
  { day: 19, focus: "Iterating Over Properties and Values", description: "Understand the for...in loop for object properties and the for...of loop for iterable data structures.", topics: ["For...in loop (objects)", "For...of loop (arrays, strings)"], time: "1 hr" },
  { day: 20, focus: "Changing Data Types", description: "Learn how to explicitly convert values from one data type to another.", topics: ["Converting to String", "Converting to Number", "Converting to Boolean", "Automatic type conversion"], time: "1 hr" },
  { day: 21, focus: "Managing Code Errors", description: "Learn how to gracefully handle runtime errors in your JavaScript code using try...catch blocks.", topics: ["Try block", "Catch block", "Finally block", "Throwing custom errors"], time: "1 hr" },
  { day: 22, focus: "Variable Visibility", description: "Deepen your understanding of where variables are accessible based on their declaration and scope.", topics: ["Global scope", "Function scope", "Block scope (let, const)"], time: "1 hr" },
  { day: 23, focus: "Understanding Declaration Behavior", description: "Explore the concept of hoisting in JavaScript and how it affects variable and function declarations.", topics: ["Variable hoisting (var vs let/const)", "Function hoisting"], time: "1 hr" },
  { day: 24, focus: "Asynchronous Foundation - Callbacks", description: "Understand callback functions and how they are used for asynchronous operations or to pass functions as arguments.", topics: ["What are callbacks?", "Synchronous vs. asynchronous callbacks", "Callback hell (introduction)"], time: "1 hr" },
  { day: 25, focus: "JavaScript and HTML", description: "Begin your journey into the Document Object Model (DOM) and how JavaScript interacts with HTML.", topics: ["What is the DOM?", "The document object", "Nodes (elements, text, attributes)"], time: "1 hr" },
  { day: 26, focus: "Finding Elements by ID and Tag", description: "Learn the primary methods for selecting single or multiple HTML elements from the DOM.", topics: ["getElementById()", "getElementsByTagName()"], time: "1 hr" },
  { day: 27, focus: "Finding Elements by Class and Selector", description: "Continue exploring element selection with more flexible methods for targeting elements.", topics: ["getElementsByClassName()", "querySelector()", "querySelectorAll()"], time: "1 hr" },
  { day: 28, focus: "Modifying Page Content", description: "Discover how to dynamically change the text and HTML content of elements on a webpage.", topics: ["innerHTML property", "textContent property"], time: "1 hr" },
  { day: 29, focus: "Dynamic Element Properties", description: "Learn to read, set, and remove attributes of HTML elements using JavaScript.", topics: ["getAttribute()", "setAttribute()", "removeAttribute()", "hasAttribute()"], time: "1 hr" },
  { day: 30, focus: "Styling with JavaScript", description: "Understand how to dynamically modify the CSS styles of HTML elements.", topics: ["style property", "Accessing and setting individual CSS properties"], time: "1 hr" },
  { day: 31, focus: "Dynamic DOM Manipulation", description: "Master the techniques for creating new elements and appending or removing them from the DOM.", topics: ["createElement()", "appendChild()", "insertBefore()", "removeChild()", "replaceChild()"], time: "1 hr" },
  { day: 32, focus: "Responding to User Actions", description: "Get started with DOM events to make your web pages interactive by reacting to user actions.", topics: ["What are events?", "Event handlers (onclick, onload, onchange, onmouseover, onmouseout)"], time: "1 hr" },
  { day: 33, focus: "Modern Event Handling", description: "Learn the preferred and more flexible method for attaching event listeners to elements.", topics: ["addEventListener() method", "Removing event listeners (removeEventListener())"], time: "1 hr" },
  { day: 34, focus: "Event Details and Flow", description: "Explore the event object that provides details about an event and understand event bubbling and capturing.", topics: ["The event object", "Event.target", "Event propagation (bubbling, capturing)", "event.stopPropagation()", "event.preventDefault()"], time: "1 hr" },
  { day: 35, focus: "Interactive Forms", description: "Learn how to access form elements and perform basic client-side validation.", topics: ["Accessing form elements", "Input types", "Basic form validation"], time: "1 hr" },
  { day: 36, focus: "The Browser Environment", description: "Discover the global window object and its essential properties and methods for interacting with the browser.", topics: ["Window object (alert, confirm, prompt, open, close)", "Window dimensions"], time: "1 hr" },
  { day: 37, focus: "Browser and Screen Information", description: "Learn to retrieve information about the user's browser and screen.", topics: ["navigator object (appName, userAgent, language)", "screen object (width, height, availWidth)"], time: "1 hr" },
  { day: 38, focus: "Managing Browser History and URL", description: "Understand how to interact with the browser's history and manipulate the current URL.", topics: ["history object (back, forward, go)", "location object (href, pathname, reload)"], time: "1 hr" },
  { day: 39, focus: "Scheduled Code Execution", description: "Learn to execute code after a delay or repeatedly at intervals using setTimeout and setInterval.", topics: ["setTimeout()", "clearTimeout()", "setInterval()", "clearInterval()"], time: "1 hr" },
  { day: 40, focus: "Object-Oriented JavaScript", description: "Introduce ES6 classes as syntactic sugar for constructor functions to create objects with a blueprint.", topics: ["Class declaration", "Constructor method", "Class methods"], time: "1 hr" },
  { day: 41, focus: "Building on Blueprints", description: "Explore how to create classes that inherit properties and methods from other classes using the 'extends' keyword.", topics: ["extends keyword", "super() keyword", "Method overriding"], time: "1 hr" },
  { day: 42, focus: "Organizing Your Code", description: "Learn how to structure your JavaScript code into reusable modules for better organization and maintainability.", topics: ["export keyword (named, default)", "import keyword", "Module basics"], time: "1 hr" },
  { day: 43, focus: "Enhanced String Handling", description: "Discover template literals for easier string interpolation and multi-line strings.", topics: ["Backticks", "String interpolation (${})", "Multi-line strings"], time: "1 hr" },
  { day: 44, focus: "Extracting Array Values", description: "Learn a concise way to extract values from arrays into distinct variables.", topics: ["Array destructuring syntax", "Skipping elements", "Rest pattern with arrays"], time: "1 hr" },
  { day: 45, focus: "Extracting Object Properties", description: "Master object destructuring for pulling properties out of objects into named variables.", topics: ["Object destructuring syntax", "Renaming properties", "Default values", "Rest pattern with objects"], time: "1 hr" },
  { day: 46, focus: "Flexible Function Arguments and Data Spreading", description: "Understand the versatile spread (...) and rest (...) operators for array/object manipulation and function arguments.", topics: ["Spread syntax (copy arrays/objects)", "Rest parameters"], time: "1 hr" },
  { day: 47, focus: "Flexible Function Defaults", description: "Learn how to set default values for function parameters directly in the function signature.", topics: ["Default parameter syntax", "Using expressions as defaults"], time: "1 hr" },
  { day: 48, focus: "Non-Blocking Operations", description: "Get a conceptual understanding of asynchronous programming and why it's essential in JavaScript.", topics: ["Synchronous vs. asynchronous code", "Why async?", "The event loop (high-level overview)"], time: "1 hr" },
  { day: 49, focus: "Managing Async with Promises", description: "Learn about Promises as a cleaner way to handle asynchronous operations compared to callbacks.", topics: ["What is a Promise?", "Promise states (pending, fulfilled, rejected)"], time: "1 hr" },
  { day: 50, focus: "Sequential Async Operations", description: "Master chaining promises to handle sequences of asynchronous tasks and manage errors effectively.", topics: ["Creating a Promise", ".then() for handling fulfillment", ".catch() for handling rejections", ".finally() for cleanup"], time: "1 hr" },
  { day: 51, focus: "Simplifying Asynchronous Code", description: "Dive into async/await, a modern ES8 feature that makes asynchronous code look and behave like synchronous code.", topics: ["async keyword", "await keyword", "Basic async function structure"], time: "1 hr" },
  { day: 52, focus: "Robust Async Flow", description: "Learn how to handle errors in async/await using try...catch and execute multiple async operations in parallel.", topics: ["try...catch with async/await", "Promise.all()", "Promise.race()"], time: "1 hr" },
  { day: 53, focus: "Retrieving Data from APIs", description: "Learn to use the Fetch API to make HTTP GET requests and retrieve data from external sources.", topics: ["fetch() function", "Handling Response object (json(), text())", "Basic GET request"], time: "1 hr" },
  { day: 54, focus: "Sending Data to APIs", description: "Discover how to use Fetch to send data to a server using HTTP POST requests.", topics: ["Fetch with POST method", "Request body (JSON.stringify)", "Headers (Content-Type)"], time: "1 hr" },
  { day: 55, focus: "Data Interchange Format", description: "Understand JSON (JavaScript Object Notation) as a common data format and how to parse and stringify it.", topics: ["What is JSON?", "JSON.parse()", "JSON.stringify()"], time: "1 hr" },
  { day: 56, focus: "Client-Side Data Persistence", description: "Learn to store data directly in the user's browser using localStorage and sessionStorage.", topics: ["localStorage.setItem()", "localStorage.getItem()", "localStorage.removeItem()", "sessionStorage"], time: "1 hr" },
  { day: 57, focus: "Project: Building a Basic Counter App", description: "Apply DOM manipulation and event handling to build a functional counter application.", topics: ["getElementById", "innerHTML", "addEventListener", "increment/decrement logic"], time: "1 hr" },
  { day: 58, focus: "Project: Creating a To-Do List - Part 1", description: "Start building a To-Do list application, focusing on adding new items dynamically.", topics: ["createElement", "appendChild", "event listeners on form submission"], time: "1 hr" },
  { day: 59, focus: "Project: Creating a To-Do List - Part 2", description: "Enhance the To-Do list with functionality to delete items and mark them as complete.", topics: ["removeChild", "manipulating element classes for styling", "event delegation"], time: "1 hr" },
  { day: 60, focus: "Project: Basic Calculator Functionality", description: "Implement the core logic for a simple calculator, handling number input and arithmetic operations.", topics: ["String concatenation for display", "parseInt/parseFloat", "switch/if for operators"], time: "1 hr" },
  { day: 61, focus: "Project: Calculator User Interface", description: "Connect the calculator logic to a basic HTML interface using DOM manipulation and event listeners.", topics: ["querySelectorAll for buttons", "handling button clicks", "displaying results"], time: "1 hr" },
  { day: 62, focus: "Project: API Data Display - Part 1", description: "Make a simple GET request to a public API and display a few pieces of data on the page.", topics: ["fetch API", ".then()", "JSON.parse/response.json()", "DOM update"], time: "1 hr" },
  { day: 63, focus: "Project: API Data Display - Part 2", description: "Refine the API data display, handling more complex data structures and basic error states.", topics: ["Looping through data", "error handling with .catch()", "displaying data in lists/tables"], time: "1 hr" },
  { day: 64, focus: "Project: Robust Form Validation", description: "Implement more comprehensive client-side form validation techniques, including regex and custom messages.", topics: ["Regex for email/password", "input.validity", "setCustomValidity", "displaying validation messages"], time: "1 hr" },
  { day: 65, focus: "Project: Efficient Event Handling", description: "Master event delegation for attaching event listeners to a parent element, improving performance for dynamic lists.", topics: ["Understanding event bubbling", "Attaching listener to parent", "event.target"], time: "1 hr" },
  { day: 66, focus: "Project: Persisting Data Locally", description: "Integrate localStorage into a simple application (e.g., the To-Do list) to save and retrieve data.", topics: ["localStorage.setItem", "localStorage.getItem", "JSON.stringify/parse for objects/arrays"], time: "1 hr" },
  { day: 67, focus: "Finding and Fixing Errors", description: "Learn essential debugging techniques using browser developer tools.", topics: ["console.log()", "Breakpoints", "Step-over/into/out", "Watch expressions"], time: "1 hr" },
  { day: 68, focus: "Core Concepts Recap", description: "Spend the day reviewing key fundamental JavaScript concepts to solidify understanding.", topics: ["Variables", "Data Types", "Operators", "Conditionals", "Loops", "Functions", "Objects", "Arrays"], time: "1 hr" },
  { day: 69, focus: "ES6+ Features Recap", description: "Review modern JavaScript features like arrow functions, destructuring, spread/rest, classes, and async/await.", topics: ["Arrow functions", "Template literals", "Destructuring", "Spread/Rest", "Classes", "Promises", "Async/Await"], time: "1 hr" },
  { day: 70, focus: "Your JavaScript Journey Continues", description: "Consolidate learning, reflect on progress, and identify potential next steps for further learning and project work.", topics: ["Recap of all learned skills", "Identifying personal interests (frameworks, backend, etc.)", "Brainstorming project ideas", "Resources for continued learning"], time: "1 hr" }
];
